--[==[ =========================================================================
Kintastic2.Core.DictUtils - Dictionary utils
============================================

Provides utils related to dictionary-like tables.

# TABLE OF CONTENTS

[[TOC]]

# SYNOPSIS

```lua
local DictUtils = require( "Kintastic2.Core.DictUtils" )
```
]==]


-- This module.
local DictUtils = { }


-- Modules.
local TableUtils = require( "Kintastic2.Core.TableUtils" )


-- Inherit functions from TableUtils.
setmetatable( DictUtils, {
   __index = TableUtils,
} )


--[==[ =========================================================================
# FUNCTIONS
]==]


--[==[ -----------------------------------------------------
## DictUtils.copy

Alias for [`copy`](./TableUtils.md#tableutilscopy)
from [`Kintastic2.Core.TableUtils`](./TableUtils.md#name-and-description).
]==]


--[==[ -----------------------------------------------------
## DictUtils.count

Alias for [`count`](./TableUtils.md#tableutilscount)
from [`Kintastic2.Core.TableUtils`](./TableUtils.md#name-and-description).
]==]


--[==[ -----------------------------------------------------
## DictUtils.get_keys

```lua
local keys = DictUtils.get_keys( dict )
```

Returns an array of the dictionary's keys.
]==]

function DictUtils.get_keys( dict )
   local keys = { }
   for k in pairs( dict ) do table.insert( keys, k ) end
   return keys
end


--[==[ -----------------------------------------------------
## DictUtils.get_values

```lua
local values = DictUtils.get_values( dict )
```

Returns an array of the dictionary's keys.
]==]

function DictUtils.get_values( dict )
   local vals = { }
   for k, v in pairs( dict ) do table.insert( vals, v ) end
   return vals
end


--[==[ -----------------------------------------------------
## DictUtils.map

Alias for [`map`](./TableUtils.md#tableutilsmap)
from [`Kintastic2.Core.TableUtils`](./TableUtils.md#name-and-description).
]==]


--[==[ -----------------------------------------------------
## DictUtils.pick

```lua
local function test( value, key )
   return boolean
end

local filtered = DictUtils.pick( test, dict )
```

Returns a dictionary that contains the elements of the
provided dictionary that pass a test.

The test callback function is called with the value and key
of an element as arguments (in that order). It must return
a true value for value to keep.

Examples:

```lua
-- { Yellow = 200, White = 300 }
local even_values = DictUtils.pick(
   |v|v >= 200
   { Purple = 100, Yellow = 200, White = 300 }
)
```
]==]

function DictUtils.pick( test, dict )
   local picked = { }
   for k, v in pairs( dict ) do
      if test( v, k ) then
         picked[ k ] = v
      end
   end

   return picked
end


--[==[ -----------------------------------------------------
## DictUtils.merge

```lua
local merged = DictUtils.merge( dict1 )
local merged = DictUtils.merge( dict1, dict2 )
```

Returns a dictionary the consists of the elements of `dict1`
and the elements of `dict2`. In the event of duplicate keys,
the element from `dict2` is used.

Examples:

```lua
-- { Purple = 100, Yellow = 200, White = 400 }
local merged = DictUtils.merge(
   { Purple = 100, White = 300 },
   { Yellow = 200, White = 400 }
)
```
]==]

function DictUtils.merge( dict1, dict2 )
   local dict = { }

   for k, v in pairs( dict1 ) do
      dict[ k ] = v
   end

   for k, v in pairs( dict2 ) do
      dict[ k ] = v
   end

   return dict
end


--[==[ -----------------------------------------------------
## DictUtils.merge_into

```lua
dst_dict = DictUtils.merge_into( dst_dict, src_dict )
```

Adds the elements of the `src_dict` to `dst_dict`. In the
event of duplicate keys, the element from `src_dict` is
used.

As a convenience, it returns its first argument.

Examples:

```lua
local dict = { Purple = 100, White = 300 }

-- { Purple = 100, Yellow = 200, White = 400 }
DictUtils.merge_into(
   { Yellow = 200, White = 400 }
)
```
]==]

function DictUtils.merge_into( dst_dict, src_dict )
   for k, v in pairs( src_dict ) do
      dst_dict[ k ] = v
   end

   return dst_dict
end


--[==[ -----------------------------------------------------
## DictUtils.merge_into_r

```lua
dst_dict = DictUtils.merge_into_r( dst_dict, src_dict )
```

Recursively merges `src_dict` into `dst_dict`.

As a convenience, it returns its first argument.

Examples:

```lua
local dict = {
   coal = {
      [ "Smithsville" ] = 10,
      [ "Blackburg"   ] =  5,
   },
   iron = {
      [ "Steelville"  ] = 20,
   }
}

-- {
--    coal = {
--       [ "Smithsville" ] = 10,
--       [ "Blackburg"   ] = 10,
--    },
--    copper = {
--       [ "Coppertown"  ] =  3,
--    },
--    iron = {
--       [ "Steelville"  ] = 20,
--    }
-- }
DictUtils.merge_into_r(
   dict,
   {
      coal = {
         [ "Blackburg"   ] = 10,
      },
      copper = {
         [ "Coppertown"  ] =  3,
      }
   }
)
```
]==]

function DictUtils.merge_into_r( dst_dict, src_dict )
   for k, v in pairs( src_dict ) do
      if type( dst_dict[ k ] ) == "table" then
         DictUtils.merge_into_r( dst_dict[ k ], v )
      else
         dst_dict[ k ] = v
      end
   end

   return dst_dict
end


--[==[ =========================================================================
# ITERATOR GENERATORS
]==]


--[==[ -----------------------------------------------------
## DictUtils.keys

```lua
for key in DictUtils.keys( dict ) do … end
```

Produces an iterator suitable for `for in` which visits each
element of the dictionary. It provides only the key.
]==]

function DictUtils.keys( dict )
   local k = nil
   return function()
      k = next( dict, k )
      -- In TTS, `k ~= nil` isn't reliable
      -- because of `__eq` overloads.
      if type( k ) ~= "nil" then
         return k
      end
   end
end


--[==[ -----------------------------------------------------
## DictUtils.values

```lua
for value in DictUtils.values( dict ) do … end
```

Produces an iterator suitable for `for in` which visits each
element of the dictionary. It provides only the value.
]==]

function DictUtils.values( dict )
   local k = nil
   return function()
      local v
      k, v = next( dict, k )
      -- In TTS, `k ~= nil` isn't reliable
      -- because of `__eq` overloads.
      if type( k ) ~= "nil" then
         return v
      end
   end
end


--[==[ -----------------------------------------------------
## DictUtils.spairs
## DictUtils.sorted_pairs

```lua
local function compare_func( value_a, value_b, key_a, key_b )
   return boolean
end

for value in DictUtils.spairs( dict ) do … end
for value in DictUtils.spairs( compare_func, dict ) do … end
```

Produces an iterator suitable for `for in` which visits each
element of the dictionary in ascending key order (default)
or in the order defined by `compare_func`. It provides the
key and the value.

`DictUtils.sorted_pairs` is an alias for
`DictUtils.spairs`.

Example:

```lua
local characters = {
   Blue = { name = "Legolas", race = "Elf"   },
   Red  = { name = "Aragon",  race = "Human" }
}

-- Aragon
-- Legolas
for player_color, character in DictUtils.spairs( |va,vb|va.name < vb.name, characters ) do
   print( character.name )
end
```
]==]

function DictUtils.spairs( ... )
   local num_args = select( "#", ... )

   local dict, compare_func
   if num_args == 1 then
      dict                = select( 1, ... )
   else
      local _compare_func = select( 1, ... )
      dict                = select( 2, ... )

      compare_func = function( ka, kb )
         return _compare_func( dict[ka], dict[kb], ka, kb )
      end
   end

   local keys = DictUtils.get_keys(dict)

   table.sort( keys, compare_func );

   local i = 0
   local n = #keys
   return function()   -- Iterator function
      if i < n then
         i = i + 1
         return keys[i], dict[ keys[i] ]
      end
   end
end


DictUtils.sorted_pairs = DictUtils.spairs


-- ================================================================================

return DictUtils
